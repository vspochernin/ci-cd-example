name: CI/CD Pipeline

on:
    push:
        branches:
            - master

jobs:
    test:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup JDK 17
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: '17'

            - name: Run tests
              run: mvn test

    build:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup JDK 17
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: '17'

            - name: Build with Maven
              run: mvn clean package

            - name: Archive build
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts
                  path: target/*.jar

    deploy:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Download build artifact
              uses: actions/download-artifact@v4
              with:
                  name: build-artifacts
                  path: ./app

            - name: Deploy JAR to remote server
              env:
                  REMOTE_PATH: "/home/${{ secrets.USER }}/app"
                  SSH_HOST: ${{ secrets.SSH_HOST }}
                  SSH_USER: ${{ secrets.SSH_USER }}
                  SSH_PORT: ${{ secrets.SSH_PORT }}
              run: |
                  echo "${{ secrets.SSH_KEY }}" > ssh_key
                  chmod 600 ssh_key
                  JAR_FILE=$(ls ./app/*.jar)
                  mkdir -p ~/.ssh
                  ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
                  mkdir -p ~/app
                  scp -i ssh_key -P $SSH_PORT $JAR_FILE $SSH_USER@$SSH_HOST:$REMOTE_PATH/app.jar
                  ssh -i ssh_key -p $SSH_PORT $SSH_USER@$SSH_HOST <<EOF
                    pkill -f 'java -jar $REMOTE_PATH/app.jar' || true
                    nohup java -jar $REMOTE_PATH/app.jar > app.log 2>&1 &
                  EOF
                  rm -f ssh_key
